package android.saikat.com.addproductapp.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, String> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductName = new Property(0, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ImageUrl1 = new Property(1, String.class, "imageUrl1", false, "IMAGE_URL1");
        public final static Property ImageUrl2 = new Property(2, String.class, "imageUrl2", false, "IMAGE_URL2");
        public final static Property Id = new Property(3, String.class, "id", true, "ID");
        public final static Property Price = new Property(4, int.class, "price", false, "PRICE");
    }


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"PRODUCT_NAME\" TEXT," + // 0: productName
                "\"IMAGE_URL1\" TEXT," + // 1: imageUrl1
                "\"IMAGE_URL2\" TEXT," + // 2: imageUrl2
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 3: id
                "\"PRICE\" INTEGER NOT NULL );"); // 4: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(1, productName);
        }
 
        String imageUrl1 = entity.getImageUrl1();
        if (imageUrl1 != null) {
            stmt.bindString(2, imageUrl1);
        }
 
        String imageUrl2 = entity.getImageUrl2();
        if (imageUrl2 != null) {
            stmt.bindString(3, imageUrl2);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(1, productName);
        }
 
        String imageUrl1 = entity.getImageUrl1();
        if (imageUrl1 != null) {
            stmt.bindString(2, imageUrl1);
        }
 
        String imageUrl2 = entity.getImageUrl2();
        if (imageUrl2 != null) {
            stmt.bindString(3, imageUrl2);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getPrice());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // productName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageUrl1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.getInt(offset + 4) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setProductName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImageUrl1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Product entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
